#!/bin/bash +x
die() { printf %s "${@+$@$'\n'}" 1>&2 ; exit 1 ; }

# tiny little script that does what
#    qq.bat string [string [string [...]]]
# does: search for (ebook) files by 'filename contains string [and
# string[...]]' using find, and then transforms the output into Windows
# absolute path and format suitable for copy-pasting from PuTTY window to CMD
# shell etc.
#
# Feature B: when string is all uppercase, it is treated as a string that
# can only match a whole word (ignoring case); NAME would cause a search
# clause -inameperlregex '\bname\b'.  Unfortunately no version of find comes
# close to supporting this; there are -regex 'pattern' options, but none of
# the supported regex engines seem to support the word-boundary concept.
# Also, all of the regex searches search the entire candidate filename
# (INCLUDING path component).
#
# Nevertheless, see below for 80% 'Feature B' implementation using iname and
# shell patterns

searchtreeroot="/mnt/smb/pri/data/public/ebooks"
searchtreerootWindows='p:/ebooks'
wordsep="[-._]"
tail=""
# set -x
uprcaseword="^[^a-z]+$"
for var in "$@" ; do
   var="${var//#/sharp}"
   if [[ $var =~ $uprcaseword ]]; then
      # first approximation of [Feature B]
      tail+=' ( -iname *'$wordsep$var$wordsep'* -o -iname '$var$wordsep'* )'
   else
      tail+=' -iname *'$var'*'
   fi
done
[ "$tail" ] || die "no search keys?"
# echo "tail='$tail'"
# set -x
# these two sed variations work equivalently; -e version may be more portable (and clearer?)
#                                                              this space after ; is required! --v
#find "$searchtreeroot" -type f ${tail} | sed    s#^"$searchtreeroot"#"$searchtreerootWindows"#'; 's#/#\\\\#g
 find "$searchtreeroot" -type f ${tail} | sed -e s#^"$searchtreeroot"#"$searchtreerootWindows"# -e s#/#\\\\#g
